import os

from io import BytesIO
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from pytube import YouTube
from texts_for_replys import *
from buttons import *


load_dotenv()
storage = MemoryStorage()


bot = Bot(os.getenv('TOKEN_API'))
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    WAITING_FOR_TEXT = State()
    WAITING_FOR_QUALITY = State()
    WAITING_FOR_MUSIC_TEXT = State()


@dp.message_handler(lambda message: message.text == "/start")
async def get_start(message: types.Message):
    return await message.answer(text=START_TEXT,
                                reply_markup=kb_main)

@dp.message_handler(lambda message: message.text == "üìú –û–ø–∏—Å –ë–æ—Ç—É")
async def get_descr(message: types.Message):
    await message.answer(text=DESCRIPTION_TEXT)


@dp.message_handler(lambda message: message.text == "üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")
async def get_help(message: types.Message):
    await message.answer(text=TEXT_HELP)

@dp.message_handler(lambda message: message.text == "üéº –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—ñ—Å–Ω—é")
async def get_audio(message: types.Message):
    await Form.WAITING_FOR_MUSIC_TEXT.set()
    await message.answer("üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ YouTube –≤—ñ–¥–µ–æ –∑ –∞—É–¥—ñ–æ —è–∫e —Ö–æ—á–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
                         reply_markup=close_kb)


@dp.message_handler(lambda message: message.text.startswith("http"), state=Form.WAITING_FOR_MUSIC_TEXT)
async def process_text_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url_music'] = message.text

        url_youtube_music = data['url_music']

        try:
            video = YouTube(url_youtube_music)
            audio_stream = video.streams.filter(only_audio=True, file_extension="mp4").first()

            # Download the audio stream into a memory buffer
            buffer = BytesIO()
            audio_stream.stream_to_buffer(buffer)

            start_message = await message.answer("‚öí –ô–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...")

            buffer.seek(0)
            # Send the audio as a document to the user
            caption = video.title
            await bot.send_audio(message.chat.id,
                                 audio=types.InputFile(buffer, filename=video.title + ".mp3"),
                                 caption=caption,
                                 reply_markup=kb_main,
                                 )

            await state.finish()
            await bot.delete_message(message.chat.id, start_message.message_id)

        except Exception as e:
            await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e} ‚ùå", reply_markup=kb_main)

@dp.message_handler(lambda message: message.text == "üé• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ")
async def start_download(message: types.Message):
    await Form.WAITING_FOR_TEXT.set()
    await message.answer("üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ —è–∫–µ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"
                         "(–ù–µ –±—ñ–ª—å—à–µ 5 —Ö–≤, –∞–±–æ –±—ñ–ª—å—à–µ, –∞–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –±—É–¥–µ 360—Ä)", reply_markup=close_kb)


@dp.message_handler(lambda message: message.text.startswith("http"), state=Form.WAITING_FOR_TEXT)
async def process_text_video(message: types.Message, state: FSMContext):
    await Form.WAITING_FOR_QUALITY.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞

    async with state.proxy() as data:
        data['url_video'] = message.text

    await message.answer(text='üìç –û–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ —è–∫–µ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏:', reply_markup=kb_resolution)


@dp.message_handler(lambda message: message.text in ["360p", "720p", "1080p", "The best res"], state=Form.WAITING_FOR_QUALITY)
async def process_quality_choice(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        url_youtube = data['url_video']
        user_choice = message.text

        try:
            video = YouTube(url_youtube)
            if user_choice != "The best res":
                stream = video.streams.get_by_resolution(user_choice)
            else:
                stream = video.streams.get_highest_resolution()
            buffer = BytesIO()
            stream.stream_to_buffer(buffer)

            start_message = await message.answer("‚öí –ô–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ...")
            video_title = video.title

            buffer.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±—É—Ñ–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ
            await bot.send_video(message.chat.id,
                                 buffer,
                                 caption="Caption: " + video_title + " \nVideo Quality: " + user_choice)

            await bot.delete_message(message.chat.id, start_message.message_id)

            await state.finish()
            await message.reply("‚úÖ –í–∞—à–µ –≤—ñ–¥–µ–æ —É –≤–∏–±—Ä–∞–Ω—ñ–π —è–∫–æ—Å—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", reply_markup=kb_main)
        except Exception as e:
            await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e} ‚ùå", reply_markup=kb_main)
            await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)